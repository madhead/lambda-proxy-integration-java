---
stages:
  - Build
  - Test
  - Deploy test Lambda
  - Integration test
  - Publish

.build:
  stage: Build
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export GRADLE_OPTS='-Dorg.gradle.daemon=false'
  script:
    - ./gradlew assemble shadowJar
  cache:
    key: $CI_JOB_NAME
    paths:
      - .gradle/wrapper
      - .gradle/caches

.unit:
  stage: Test
  dependencies: []
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export GRADLE_OPTS='-Dorg.gradle.daemon=false'
  cache:
    key: $CI_JOB_NAME
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    reports:
      junit: model/build/test-results/test/TEST-*.xml

build@openjdk:8:
  extends: .build
  image: openjdk:8
  artifacts:
    paths:
      - lambda-test/build/libs/lambda-test-1.3.1-all.jar

build@openjdk:10:
  extends: .build
  image: openjdk:10

build@openjdk:11:
  extends: .build
  image: openjdk:11

build@openjdk:12:
  extends: .build
  image: openjdk:12

unit@openjdk:8:
  extends: .unit
  image: openjdk:8
  script:
    - ./gradlew test jacocoTestReport
    - bash <(curl -s https://codecov.io/bash)

unit@openjdk:10:
  extends: .unit
  image: openjdk:10
  script:
    - ./gradlew test

unit@openjdk:11:
  extends: .unit
  image: openjdk:11
  script:
    - ./gradlew test

unit@openjdk:12:
  extends: .unit
  image: openjdk:12
  script:
    - ./gradlew test

gradle-version:
  stage: Test
  image: openjdk:8
  dependencies: []
  script:
    - gradle_version=$(./gradlew --version | sed -rn 's/^Gradle (.+)$/\1/p')
    - latest_gradle_version=$(curl https://services.gradle.org/versions/current | python2 -c 'import json,sys;print json.load(sys.stdin)["version"]')
    - echo $gradle_version
    - echo $latest_gradle_version
    - '[[ $gradle_version == $latest_gradle_version ]]'
  allow_failure: true

deploy-test-lambda:
  stage: Deploy test Lambda
  image:
    name: nbrown/aws-cli:latest
    entrypoint:
      - ''
  dependencies:
    - build@openjdk:8
  script:
    - aws lambda update-function-code --function-name ${AWS_LAMBDA_FUNCTION_NAME} --zip-file fileb://lambda-test/build/libs/lambda-test-1.3.1-all.jar
  only:
    - master
  environment:
    name: test
    url: $TEST_URL

smoke:
  stage: Integration test
  image:
    name: postman/newman
    entrypoint:
      - /bin/sh
      - -c
  dependencies: []
  script:
    - newman run lambda-test/src/test/postman/lambda-test.postman_collection.json
  only:
    - master

bintray:
  stage: Publish
  image: openjdk:8
  dependencies: []
  script:
    - ./gradlew bintrayUpload
  only:
    - master
